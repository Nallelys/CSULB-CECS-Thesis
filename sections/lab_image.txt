The most time consuming part of managing a lab is building and maintaining the master image to the lab. All workstations in the lab are basically clones of a single machine designated as the lab master. This machine is then cloned using the cloning process. Details on cloning can be found in the cloning section. Descriptions on the various steps to build the master image are here. What is most important about the image is the instruction set used to build it. The actual image itself is pointless if there are no instructions on how it was built. If instructions exist, they can further be tailored if distribution upgrades are made, or possibly if the choice of distribution changes. 

-Booting from cd and doing barebones install.
At some point, a CD or DVD must be used to run the installer for the image. This may not be a physical disk if the image is netbooted, but for CECS labs, the chosen distribution Ubuntu will not support a netboot to CD. Fortunately, the CD only needs to be used once on the master image. The rest of the labs can be cloned via network. Once the CD started some type of setup program or script must be run to do a standard install of the distribution. How this setup is run varies depending on the distribution. In CECS, we run the server edition of Ubuntu and do a basic install with nothing but essentials running. 

-Setting up root or admin (dummy workaround).
Sometimes during the install, it will prompt to create a non-root user account. This is because Unix and Linux should never be run directly with the root user under normal circumstances. In our lab environment, the root user is only used to do ssh pushes and troubleshoot issues. However, some distributions will force creation of a non-root system administration account. To workaround this, create an account called dummy. After the install is finished, use the administrative privileges this account grants to set a root passwd, then use root to delete the account. 

-setting up networking.
Network settings vary depending on how dhcp is set up. The most important aspect of network settings is making sure a workstations hostname matches its physical label. This is the only way to ensure each machine can be identified for troubleshooting purposes. As mentioned in the printserver section, the dhcpd server can be given a list of MAC address mappings to IP addresses so that all the client machines can be set to take their network settings from dhcp. The alternative is using static IP addresses which will require going to each machine during the cloning process and assigning the IP which matches the physical label. How the settings are set depends on the distribution. They are usually found in the /etc directory somewhere. 

-Master package (repository) list and installation. Then removal of uneeded (cups), and autoremove.
The reason we only install essentials during the CD install stage is because we only install packages we need. We build a master packages list of things to install and run that list into a package manager. The manager then goes out to its distribution's download site and fetches the packages requested. It then handles the installation process and dependency resolving for all packages it is able to retrieve. This process requires minimal interaction from a system administrator. As a result, the number packages that can be installed is only limited by the minimum size of the disks the image will be cloned onto. Since most Linux distributions rarely take up more than 10-15 gigabytes and we have disks of at least 80 gigabytes large. 

-Manual package (source or binaries) installation.(drjava,derby)
The package list only works for packages that are available from the Linux distribution's package repositories. If a faculty member requests a package that is not available in the standard repository, it must be added manually to the image. This will require extra work on the part of the system administrator building the image, so there should be a limit placed on the number of manual packages to install. This can be lessened if an automated script can be used. Actual instructions for installing packages manually varies depending on the package. Sometimes, files only need to be copied to an executable path to be run. Other times, they must be compiled from source code. And for some complicated packages, there may be an arbitrary number of steps to set up and install the package. 

-Text only login (init 3 or removing gdm.con)
Part of our environment involves keeping text only login screens and command lines. This allows us to run courses which students will primarily use the command line for. This will build their experience with it which is important for many industry jobs. It also allows us to use special shell accounts that will run scripts on login. For example, we use a user account called "search" with the password "account" that runs an account creation script at login that students use to register new accounts. 

Actually enabling text only mode seems to be becoming harder and harder with each new Linux distribution release. Most want to boot straight into a graphical user interface (GUI) to handle logins. This makes sense for non-technical users, but makes things difficult for technical students. Until recently, the easiest way was to set the default runlevel to 3. This will allow networking and multiple users while remaining in text mode. However, this is only possible on systems that run the classic Unix init process. Our current distribution, Ubuntu, does not use init. We've managed to still get text mode by removing the configuration script for the GUI login interface. This presents several other problems, but after carefully working through them, we've managed to get our current system stable. With each new distribution release though, new workarounds are needed for problems that appear. 

-REF:Automount (may be a reference to filesystem management)
Information on what automount does can be found in the filesystem management section. 

-Groups
-REF: Mail
-Disable student control (ctrl-alt-del, menu shutdown, yp tools, )
-Powersaving
-system logs and optionally log forwarding for audit purposes.
-REF: ssh host and authorized keys
-REF: Printing (should also include paper compiled commands)
-REF: support commands local
-Restrict access (hosts.allow,deny,cron.deny,expired shells should go here as well). Note the alternative, iptables for firewalling the outside. Also note that ideally you'd want to be behind a master firewall (corporate)
-ntp (time)
-Bootloader setup (lilo.conf). Also note the linked kernel.
-REF: rebooting to cleanup. (and include crontab)
-Login scripts (set hostname, check space, alter environment, etc)
-motd
-Miscellaneus tweaks (firefox,pine/alpine(describe general because this happens often),gtk printing,eclipse printing,jetty,ctrl-alt-bksp,pmount,pumount)
-Considerations for different hardware architectures (64 bit compiles,manual
driver install)

