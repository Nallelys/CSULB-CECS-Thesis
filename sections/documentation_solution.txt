With any lab management, documentation and procedures need to exist. For example, if master lab images exist, full sets of instructions need to exist to describe how to rebuild the master from scratch at any point. That said, a secure place needs to exist to hold this documentation. At a minimum, it needs to be in a directory somewhere that is backed up periodically. More advanced documentation solutions may use online wikis or even code repositories for the revisioning they provide. In the CECS lab environment, since we already have a good backup system in place for user accounts, we simply created a user "conf" to store documentation in. 

The user conf can be created in the same way as a standard user account. It makes sense to remove the quota on it but if it's only storing text documentation that probably isn't necessary. In our case, conf is used for other things such as holding a student's skeleton directory so a quota is not applied to it. Since conf is a network user account, it would be available from all machines that have NIS and NFS mounts set up. Accessing the account can be done in several ways. If an administrator can become root on a machine that conf is accessible from, they can "su - conf" on the machine to become conf. The rlogin command can be used assuming a user is in conf's .rhosts file. The modern equivalent of rlogin, Secure Shell, can be set up by adding an authorized administrator's public key to conf's authorized_keys file. 

In conf's home directory, we put a folder called "admin" to hold administrative documentation. Subfolders for the various lab builds exist. We have folders for Linux labs, Mac labs, a few notes on the network, patches, the print servers, and the web servers. Other directories are created as needed. These directories should contain such things as system build notes, system patching notes (both distribution patches and manual fixes), supporting documentation (such as user manuals and web links), or just general system notes. Storing the actual system patches could become quite large for a network filesystem. It is usually much more efficient to have a dedicated file server to store large patches and distribution images. All of these folders, at least in our implementation, are set to world readable. We do not store any sort of password or key information and do not have a problem with students being able to read how our labs are set up and managed. Security through obscurity is not really security at all. 

Alternatively, the information can be stored on a wiki. Setting up a wiki requires a webserver, usually with php and mysql support. The setup of the wiki can become somewhat convoluted depending on the configuration. The advantage of the wiki is that it can be accessed by any web browser. It may even be stored on the same server used for the support website. It's probably not a good idea to open this webserver to the internet since it has many more security vulnerabilities than flat files. 

Another alternative is to just use a code repository such as Subversion or Git. These similarly require some complex configuration to set up properly. The advantage of using these is the revisioning. These can even be integrated into a web server to get the advantages of both. For our purposes though, we found that simple text files work fine so long as they are periodically backed up. 
